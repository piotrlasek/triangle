/*
 * DataViewer2.java
 *
 * Created on 5 stycze≈Ñ 2008, 08:52
 */

package lvaindex.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JPanel;

import lvaindex.vafile.Cell;
import lvaindex.vafile.VAFile;

/**
 *
 * @author  Piotrek
 */
public class DataViewer2 extends javax.swing.JFrame {
    
    //ArrayList< SpatialObject > objects = null;
    VAFile vaf;

    int pointsBefore = 0;

    int nDim = 2;

    static int a = 0;

    /** Creates new form DataViewer2 */
    public DataViewer2( VAFile vaf ) {
        this.vaf = vaf;
        initComponents();
        //try{ Thread.sleep( (long) 1000 ); } catch ( Exception e) {}
        
        System.out.println("public DataViewer2( VAFile vaf )");
        System.exit( -1 );
        /*
        jPanel1.setPreferredSize( new Dimension( vaf.iMax[0], vaf.iMax[ 1]) );
         */
        //this.repaint();
    }
    
    
    public JPanel getPanel()
    {
        return jPanel1;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        textArea1 = new java.awt.TextArea();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel() {
            public void paint(Graphics g) {
                // System.out.println(a++);
                super.paint(g);
                //Graphics jpg = this.getPanel().getGraphics();
                paintData(g);
                paintCellBorders(g);
            }  
        };
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jRadioButtonNN2 = new javax.swing.JRadioButton();
        jRadioButtonNN = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.add(textArea1, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(jPanel4);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 400));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPanel1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 381, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel3.setPreferredSize(new java.awt.Dimension(200, 100));

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSpinner1.setName(""); // NOI18N

        buttonGroup1.add(jRadioButtonNN2);
        jRadioButtonNN2.setText("NN2");

        buttonGroup1.add(jRadioButtonNN);
        jRadioButtonNN.setSelected(true);
        jRadioButtonNN.setText("NN");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonNN2)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButtonNN, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jRadioButtonNN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonNN2)
                .addContainerGap(255, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel3);

        jPanel2.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel2);

        getContentPane().add(jSplitPane2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
            // TODO add your handling code here:
        //this.repaint();
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyTyped

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        
        System.out.println("private void jPanel1MouseClicked(java.awt.event.MouseEvent evt)");
        System.exit( -1 );
        /*
        long approx = vaf.approximate( new Integer[]{x, y} );
        Integer v = (Integer) jSpinner1.getValue();
        //jSpinner1.getV
        if ( this.jRadioButtonNN.isSelected() )
            vaf.getNN( approx, v.intValue());
        else 
            vaf.getNN2( approx, v.intValue());
        this.repaint();
         * */
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed
    
   /* 
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataViewer2().setVisible(true);
            }
        });
    }*/
    
    public void paint(Graphics g) {
            // System.out.println(a++);
            super.paint(g);

            Graphics jpg = this.getPanel().getGraphics();

           //Graphics jpg2 = njf.getPanel().getGraphics();

            paintData(jpg);
            paintCellBorders(jpg);
            
           // this.getPanel().setSize( 500, 500);

            //paintData(jpg2);
            //paintCellBorders(jpg2);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButtonNN;
    private javax.swing.JRadioButton jRadioButtonNN2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

    
    
    public void paintPoint(Graphics g, int i) {
                System.out.println("public void paintPoint(Graphics g, int i)");
                System.exit( -1 );
                
		/*SpatialObject point = vaf.getSpatialObjects().get(i);

		g.setColor(getColor(point.getValue()));
                
                Integer[] m_pCoords = point.getCoordinates();
	
                g.drawLine((int) m_pCoords[0] - 1,
                                (int) m_pCoords[1] - 1, (int) m_pCoords[0] + 1,
                                (int) m_pCoords[1] + 1);

                g.drawLine((int) m_pCoords[0] + 1,
                                (int) m_pCoords[1] - 1, (int) m_pCoords[0] - 1,
                                (int) m_pCoords[1] + 1);*/

	
	}

        /**
         * 
         * @param g
         */
        public void paintCellBorders( Graphics g)
        {
            // we assume that the number of dimensions equals 2

                // dimension Y
                // number of bits per dimension i
                /*int dimX = 0;
                int dimY = 1;
                
                int bitsX = vaf.iB[ dimX ];
                int bitsY = vaf.iB[ dimY ];
                
                // number of cells per dimension i
                long cellCountX = ( long ) Math.pow( 2, bitsX );
                long cellCountY = ( long ) Math.pow( 2, bitsY );
                // size of each cell
                long cellSizeX = ( vaf.iMax[ dimX ] - vaf.iMin[ dimX ] ) / cellCountX; 
                long cellSizeY = ( vaf.iMax[ dimY ] - vaf.iMin[ dimY ] ) / cellCountY; 

                for ( int i = 0; i < cellCountX; i++ )
                {
                    for ( int j = 0; j < cellCountY; j++ )
                    {
                        Integer[] coord = { i, j };
                        Cell c = vaf.getCell( coord );
                        if ( c != null && c.getCount() > 0)
                        {
                            int topLeftX = (int) (long) ((i) * cellSizeX) ;
                            int topLeftY = (int) (long) ((j) * cellSizeY) ;
                            
                            int width = (int)cellSizeX;
                            int height = (int)cellSizeY;
                            //g.drawOval( topLeftX, topLeftY, width, height);
                            g.drawRect( topLeftX, topLeftY, width, height);
                        }
                    }
                }*/
            
            
            System.out.println("public void paintCellBorders( Graphics g)");
            System.exit( -1 );
            
            /*
            for ( Long approx:vaf.nonEmptyCells)
            {
                Integer[] coord = vaf.approximationToCoordinates( approx );
                Cell c = vaf.getCell( coord );
                
                //if ( c != null && c.getCount() > 0)
                {
                    int dimX = 0;
                    int dimY = 1; 
                    int bitsX = vaf.iB[ dimX ];
                    int bitsY = vaf.iB[ dimY ];
                         // number of cells per dimension i
                    long cellCountX = ( long ) Math.pow( 2, bitsX );
                    long cellCountY = ( long ) Math.pow( 2, bitsY );
                    // size of each cell
                    double cellSizeX = ( vaf.iMax[ dimX ] - vaf.iMin[ dimX ] ) / (double)cellCountX; 
                    double cellSizeY = ( vaf.iMax[ dimY ] - vaf.iMin[ dimY ] ) / (double)cellCountY; 

                    int topLeftX = (int) (long) (coord[0] * cellSizeX) ;
                    int topLeftY = (int) (long) (coord[1] * cellSizeY) ;

                    int width = (int)cellSizeX;
                    int height = (int)cellSizeY;
                    //g.drawOval( topLeftX, topLeftY, width, height);
                    
                    //TODO
                    
//                    if ( c.getStatus() == Cell.Status.SELECTED ) 
//                    {
//                        g.setColor(getColor( 1 ));
//                        //g.drawRect( topLeftX+1, topLeftY+1, width-2, height-2);
//                        g.drawRect( topLeftX, topLeftY, width, height);
//                    }
//                    else
//                    {
//                        g.setColor( getColor(-1) );
//                        g.drawRect( topLeftX, topLeftY, width, height);
//                    }
                    
                }
            }*/

        }

	public Color getColor(int c) {

		switch (c) {
		case -1:
			return Color.lightGray; // unclassified
		case 0:
			return Color.lightGray; // noise
		}

		switch (c % 10) {
		case 0:
			return Color.pink;
		// return new Color(Color.pink.getRGB(), Color.pink.getGreen(),
		// Color.pink.getBlue(), a);
		case 1:
			return Color.red;
		// return new Color(Color.red.getRGB(), Color.red.getGreen(),
		// Color.red.getBlue(), a);
		case 2:
			return Color.cyan;
		// return new Color(Color.cyan.getRGB(), Color.cyan.getGreen(),
		// Color.cyan.getBlue(), a);
		case 3:
			return Color.blue;
		// return new Color(Color.blue.getRGB(), Color.blue.getGreen(),
		// Color.blue.getBlue(), a);
		case 4:
			return Color.darkGray;
		// return new Color(Color.darkGray.getRGB(), Color.darkGray.getGreen(),
		// Color.darkGray.getBlue(), a);
		case 5:
			return Color.green;
		// return new Color(Color.green.getRGB(), Color.green.getGreen(),
		// Color.green.getBlue(), a);
		case 6:
			return Color.yellow;
		// return new Color(Color.yellow.getRGB(), Color.yellow.getGreen(),
		// Color.yellow.getBlue(), a);
		case 7:
			return Color.magenta;
		// return new Color(Color.magenta.getRGB(), Color.magenta.getGreen(),
		// Color.magenta.getBlue(), a);
		case 8:
			return Color.orange;
		// return new Color(Color.orange.getRGB(), Color.orange.getGreen(),
		// Color.orange.getBlue(), a);
		case 9:
			return Color.pink;
		// return new Color(Color.pink.getRGB(), Color.pink.getGreen(),
		// Color.pink.getBlue(), a);
		// case 10:
		// return Color.yellow;

		default:
			return Color.black;
		}
	}
        
        
	public void paintData(Graphics g) {
		for (int i = 0; i < vaf.getSpatialObjects().size(); i++) {
			paintPoint(g, i);
		}
	}
}
